{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.io import loadmat\n",
    "import numpy as np\n",
    "from scipy.io.wavfile import write\n",
    "import matplotlib.pyplot as plt\n",
    "import IPython\n",
    "from IPython.display import Audio\n",
    "import math \n",
    "from numpy.fft import fft, ifft\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sounds = loadmat('/Users/ednovate/cshw2/sounds.mat')['sounds']\n",
    "\n",
    "test = loadmat('/Users/ednovate/cshw2//icaTest.mat')\n",
    "A_test = test['A']\n",
    "U_test = test['U']\n",
    "\n",
    "print(np.shape(test['A']))\n",
    "print(np.shape(test['U']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sounds  = np.asarray(sounds)\n",
    "print(np.shape(sounds))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate random matrices\n",
    "#condition:\n",
    "#mixed_signals >= n_source signals because the number of mixed signals cannot be less than the number of course signlas\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def gradw_init(sounds, n_source_signals,time, mixed_signals, eta): \n",
    "    U = sounds[0:n_source_signals, 0:time ]\n",
    "\n",
    "    print(np.shape(U))\n",
    "\n",
    "\n",
    "    a_weights = np.random.rand(mixed_signals, n_source_signals)\n",
    "\n",
    "\n",
    "    w_init = np.random.uniform( low = 0, high = 0.01, size =(n_source_signals, mixed_signals))\n",
    "\n",
    "\n",
    "    X = np.matmul(a_weights, U)\n",
    "\n",
    "\n",
    "    print(\"Shape of W is \")\n",
    "    print(np.shape(w_init))\n",
    "    print(\"w_init_start\")\n",
    "    print(w_init)\n",
    "\n",
    "    print(\"shape of X\")\n",
    "    print(np.shape(X))\n",
    "\n",
    "    Y = np.matmul(w_init, X)\n",
    "    print(np.shape(Y))\n",
    "\n",
    "    Z = np.zeros((n_source_signals, time))\n",
    "\n",
    "\n",
    "    for i in range(n_source_signals):\n",
    "        for j in range(time):\n",
    "           Z[i,j] = 1/(1+math.exp(-(Y[i,j])))   \n",
    "\n",
    "    print(\"the shape of Z is \")\n",
    "    print(np.shape(Z))\n",
    "    print(Z) \n",
    "    dynamic_identity_matrix = np.identity(n_source_signals)\n",
    "\n",
    "    one_minus_2z_matrix = np.zeros((n_source_signals, time))\n",
    "\n",
    "\n",
    "    for i in range(n_source_signals):\n",
    "        for j in range(time):\n",
    "            one_minus_2z_matrix[i,j] = 1-2*Z[i,j] \n",
    "\n",
    "    print(\"shape of one_minus_2z_matrix \")\n",
    "    print(np.shape(one_minus_2z_matrix))\n",
    "\n",
    "\n",
    "\n",
    "    intermed_result_one = np.matmul(one_minus_2z_matrix, Y.T)\n",
    "\n",
    "    intermed_result_two = np.matmul((dynamic_identity_matrix + intermed_result_one),w_init) \n",
    "\n",
    "    grad_w = eta* intermed_result_two\n",
    "\n",
    "    print(\"gradw\")\n",
    "    print(np.shape(grad_w))\n",
    "\n",
    "\n",
    "    print(\"intermed \")\n",
    "    print(np.shape(intermed_result_one))\n",
    "\n",
    "    w_new = w_init + grad_w\n",
    "    print(\"w _init new\")\n",
    "    print(w_new)\n",
    "    return w_new\n",
    "    \n",
    "\n",
    "    \n",
    "    \n",
    "def grad_update(previous_weights):\n",
    "    intermed_result_two = np.matmul((dynamic_identity_matrix + intermed_result_one),previous_weights) \n",
    "\n",
    "    grad_w = eta* intermed_result_two\n",
    "\n",
    "    print(\"gradw\")\n",
    "    print(np.shape(grad_w))\n",
    "\n",
    "\n",
    "    print(\"intermed \")\n",
    "    print(np.shape(intermed_result_one))\n",
    "\n",
    "    w_new = w_init + grad_w\n",
    "    print(\"w _init new\")\n",
    "    print(w_new)\n",
    "    return w_new\n",
    "    \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3, 40)\n",
      "Shape of W is \n",
      "(3, 3)\n",
      "w_init_start\n",
      "[[0.00962051 0.0082658  0.00448167]\n",
      " [0.00865893 0.00851843 0.00911358]\n",
      " [0.00345452 0.00345227 0.00985721]]\n",
      "shape of X\n",
      "(3, 40)\n",
      "(3, 40)\n",
      "the shape of Z is \n",
      "(3, 40)\n",
      "[[0.49988444 0.49987425 0.49993508 0.49994958 0.49991255 0.49985505\n",
      "  0.499942   0.5000139  0.50000027 0.49994526 0.49997027 0.50001925\n",
      "  0.49995862 0.49994708 0.50003334 0.50000047 0.49997833 0.49998408\n",
      "  0.50003048 0.5000598  0.50009421 0.50015917 0.50018206 0.50023067\n",
      "  0.5002188  0.50017485 0.50020878 0.50020736 0.50005971 0.50004442\n",
      "  0.50001589 0.4999317  0.49995883 0.5000273  0.50002778 0.50005899\n",
      "  0.49996639 0.49988398 0.49997743 0.49998272]\n",
      " [0.49988196 0.49987701 0.4999332  0.49994872 0.49991561 0.49985079\n",
      "  0.49994014 0.50001776 0.4999999  0.49993817 0.49996851 0.50001794\n",
      "  0.49995255 0.49993962 0.5000361  0.49999883 0.49997245 0.49997797\n",
      "  0.50003555 0.50006265 0.50008986 0.50015835 0.50018456 0.50023642\n",
      "  0.50022079 0.50017801 0.50021629 0.50021723 0.50005679 0.50004748\n",
      "  0.50002101 0.49993367 0.49995546 0.50003104 0.50003266 0.50006329\n",
      "  0.49996661 0.49987962 0.49998054 0.49997466]\n",
      " [0.49993882 0.49994055 0.4999645  0.49997294 0.49996005 0.49992134\n",
      "  0.49996778 0.50001155 0.49999875 0.49996231 0.49998225 0.50000728\n",
      "  0.49997082 0.49996295 0.50001996 0.49999762 0.49998041 0.49998258\n",
      "  0.50002126 0.50003312 0.50004037 0.50007764 0.50009364 0.50012223\n",
      "  0.50011091 0.5000906  0.5001138  0.50011635 0.50002526 0.50002593\n",
      "  0.50001438 0.49996789 0.49997397 0.50001847 0.50002055 0.50003493\n",
      "  0.4999834  0.49993619 0.49999292 0.49998017]]\n",
      "shape of one_minus_2z_matrix \n",
      "(3, 40)\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00971671 0.00834845 0.00452649]\n",
      " [0.00874552 0.00860361 0.00920471]\n",
      " [0.00348907 0.00348679 0.00995578]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 1\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 2\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 3\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 4\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 5\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 6\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 7\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 8\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 9\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 10\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 11\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 12\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 13\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 14\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 15\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 16\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 17\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 18\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 19\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 20\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 21\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 22\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 23\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 24\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 25\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 26\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 27\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 28\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 29\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.00105225 0.00366062 0.00078932]\n",
      " [0.00694431 0.00933293 0.00745284]\n",
      " [0.00371159 0.00716956 0.00741926]]\n",
      "gradw\n",
      "(3, 3)\n",
      "intermed \n",
      "(3, 3)\n",
      "w _init new\n",
      "[[0.0009656  0.00361374 0.00075195]\n",
      " [0.0069263  0.00934022 0.00743532]\n",
      " [0.00371382 0.00720638 0.0073939 ]]\n",
      "iteration: 30\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "eta = 0.01\n",
    "\n",
    "n_source_signals = 3\n",
    "\n",
    "time = 40\n",
    "\n",
    "mixed_signals = 3\n",
    "\n",
    "iterations = 30\n",
    "\n",
    "\n",
    "\n",
    "grad_init = gradw_init(sounds, n_source_signals,time, mixed_signals, eta)\n",
    "\n",
    "\n",
    "\n",
    "grad_new = grad_update(grad_init)\n",
    "grad_next = grad_update(grad_new)\n",
    "\n",
    "\n",
    "\n",
    "for i in range(iterations):\n",
    "    if (i<=iterations +1):\n",
    "        grad_new = grad_update(grad_init)\n",
    "        grad_next = grad_update(grad_new)\n",
    "        i+= 1\n",
    "        print( \"iteration: \" + str(i))\n",
    "\n",
    "\n",
    "\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(grad_w)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
